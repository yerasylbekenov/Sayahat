from gigachat import GigaChat
from configs import config
from datetime import datetime
import re
import logging
from typing import List, Dict, Optional, Set, Tuple
from utils.models import Tour, City, Hotel
from data import database

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class GigaChatClient:
    def __init__(self):
        self.auth_key = config.AUTH_KEY
        self.verify_ssl = False
        self.db = database.Database()
        
        # Log initialization
        logger.info(f"GigaChatClient initialized with auth key present: {bool(self.auth_key)}")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.system_prompt = """
        –í—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Sayahat –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç—É—Ä–æ–≤. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º 
        –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏—Ö –∑–∞–ø—Ä–æ—Å—ã
        –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞.
        –í–∞–º –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏ —ç—Ç–æ –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω. –í–∞–º –µ—â–µ –Ω–µ–ª—å–∑—è –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ —Ç—É—Ä—ã –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö —ç—Ç–æ —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω.
        """
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Ö —Å–≤—è–∑–∏
        self.categories = {
            'mountains': {
                'patterns': r'\b(–≥–æ—Ä—ã|–≤–µ—Ä—à–∏–Ω—ã|–ø–∏–∫|–∞–ª—å–ø–∏–Ω–∏–∑–º|—Ç—Ä–µ–∫–∫–∏–Ω–≥|–ø–æ—Ö–æ–¥)\b',
                'keywords': ['–≥–æ—Ä–Ω—ã–π', '–∞–ª—å–ø–∏–Ω–∏—Å—Ç—Å–∫–∏–π', '—Ç—Ä–µ–∫–∫–∏–Ω–≥'],
                'locations': ['–ê–ª–º–∞—Ç—ã', '–ú–µ–¥–µ—É', '–®—ã–º–±—É–ª–∞–∫', '–¢–∞–ª–≥–∞—Ä', '–ë–æ–ª—å—à–æ–µ –ê–ª–º–∞—Ç–∏–Ω—Å–∫–æ–µ –æ–∑–µ—Ä–æ'],
                'activities': ['—Ç—Ä–µ–∫–∫–∏–Ω–≥', '—Å–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ', '–ø–æ—Ö–æ–¥—ã', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ'],
                'related_categories': ['nature', 'adventure']
            },
            'lakes': {
                'patterns': r'\b(–æ–∑–µ—Ä–æ|–æ–∑—ë—Ä–∞|–ø–æ–±–µ—Ä–µ–∂—å–µ|–ø–ª—è–∂)\b',
                'keywords': ['–æ–∑–µ—Ä–Ω—ã–π', '–ø—Ä–∏–±—Ä–µ–∂–Ω—ã–π'],
                'locations': ['–ë–æ—Ä–∞–±–∞–π', '–ê–ª–∞–∫–æ–ª—å', '–ë–∞–ª—Ö–∞—à', '–ö–æ–ª—å—Å–∞–π', '–ö–∞–∏–Ω–¥—ã'],
                'activities': ['–ø–ª–∞–≤–∞–Ω–∏–µ', '—Ä—ã–±–∞–ª–∫–∞', '–æ—Ç–¥—ã—Ö', '–∫–µ–º–ø–∏–Ω–≥'],
                'related_categories': ['nature', 'relax']
            },
            'culture': {
                'patterns': r'\b(–º—É–∑–µ–π|–∏—Å—Ç–æ—Ä–∏—è|–∫—É–ª—å—Ç—É—Ä–∞|—Ç—Ä–∞–¥–∏—Ü–∏–∏|—é—Ä—Ç–∞|–º–∞–≤–∑–æ–ª–µ–π)\b',
                'keywords': ['–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '–∫—É–ª—å—Ç—É—Ä–Ω—ã–π', '—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π'],
                'locations': ['–¢—É—Ä–∫–µ—Å—Ç–∞–Ω', '–û—Ç—Ä–∞—Ä', '–¢–∞—Ä–∞–∑', '–ê—Å—Ç–∞–Ω–∞'],
                'activities': ['—ç–∫—Å–∫—É—Ä—Å–∏–∏', '–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã', '–¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏'],
                'related_categories': ['history', 'city']
            },
            'adventure': {
                'patterns': r'\b(—Ä–∞—Ñ—Ç–∏–Ω–≥|–∫–∞–Ω—å–æ–Ω|—Å–∞—Ñ–∞—Ä–∏|–¥–∂–∏–ø-—Ç—É—Ä|–∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã)\b',
                'keywords': ['—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π', '–ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π', '–∞–∫—Ç–∏–≤–Ω—ã–π'],
                'locations': ['–ß–∞—Ä—ã–Ω—Å–∫–∏–π –∫–∞–Ω—å–æ–Ω', '–¢—É—Ä–≥–µ–Ω—å—Å–∫–æ–µ —É—â–µ–ª—å–µ', '–ö–∞–ø—á–∞–≥–∞–π'],
                'activities': ['—Ä–∞—Ñ—Ç–∏–Ω–≥', '–¥–∂–∏–ø-—Ç—É—Ä—ã', '—Å–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ'],
                'related_categories': ['nature', 'sport']
            },
            'nature': {
                'patterns': r'\b(–ø—Ä–∏—Ä–æ–¥–∞|–ø–∞—Ä–∫|–∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫|—Ñ–ª–æ—Ä–∞|—Ñ–∞—É–Ω–∞|—Å—Ç–µ–ø—å)\b',
                'keywords': ['–ø—Ä–∏—Ä–æ–¥–Ω—ã–π', '—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π', '–∑–∞–ø–æ–≤–µ–¥–Ω—ã–π'],
                'locations': ['–ê–∫—Å—É-–ñ–∞–±–∞–≥–ª—ã', '–ê–ª—Ç—ã–Ω-–≠–º–µ–ª—å', '–ë—É—Ä–∞–±–∞–π'],
                'activities': ['–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø—Ç–∏—Ü–∞–º–∏', '—Ñ–æ—Ç–æ–æ—Ö–æ—Ç–∞', '—ç–∫—Å–∫—É—Ä—Å–∏–∏'],
                'related_categories': ['mountains', 'lakes']
            }
        }

    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat"""
        try:
            with GigaChat(credentials=self.auth_key, 
                         model="GigaChat-Pro", 
                         verify_ssl_certs=self.verify_ssl) as giga:
                test_response = giga.chat("Test connection")
                success = bool(test_response and test_response.choices)
                logger.info(f"GigaChat connection test {'successful' if success else 'failed'}")
                return success
        except Exception as e:
            logger.error(f"GigaChat connection test failed with error: {str(e)}")
            return False

    def analyze_preferences(self, message: str) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é: {message}")

        preferences = {}

        for category, data in self.categories.items():
            pattern_matches = len(re.findall(data['patterns'], message, re.I))
            keyword_matches = sum(1 for keyword in data['keywords'] 
                                if keyword.lower() in message.lower())
            location_matches = sum(1 for location in data['locations'] 
                                if location.lower() in message.lower())
            activity_matches = sum(1 for activity in data['activities'] 
                                if activity.lower() in message.lower())

            total_score = (pattern_matches * 2 + 
                        keyword_matches * 1.5 + 
                        location_matches * 2 + 
                        activity_matches * 1.5)

            if total_score > 0:
                preferences[category] = total_score
                for related in data['related_categories']:
                    preferences[related] = preferences.get(related, 0) + total_score * 0.5

            logger.info(f"üìä {category}: {total_score} –±–∞–ª–ª–æ–≤")

        logger.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}")
        return preferences


    def get_relevant_locations(self, preferences: Dict[str, float]) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        locations = set()
        for category, score in preferences.items():
            if category in self.categories:
                locations.update(self.categories[category]['locations'])
        logger.info(f"Found relevant locations: {locations}")
        return locations

    def get_relevant_activities(self, preferences: Dict[str, float]) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        activities = set()
        for category, score in preferences.items():
            if category in self.categories:
                activities.update(self.categories[category]['activities'])
        logger.info(f"Found relevant activities: {activities}")
        return activities

    def search_locations(self, locations: Set[str]) -> List[Tuple[City, float]]:
        """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–∞—Ö –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö"""
        logger.info(f"Searching locations: {locations}")
        results = []
        
        try:
            with self.db._get_cursor() as cursor:
                for location in locations:
                    cursor.execute('''
                        SELECT *, 
                               CASE 
                                   WHEN name LIKE ? THEN 2
                                   WHEN info LIKE ? THEN 1
                               END as relevance
                        FROM cities 
                        WHERE name LIKE ? OR info LIKE ?
                        ORDER BY relevance DESC
                    ''', (f'%{location}%', f'%{location}%', f'%{location}%', f'%{location}%'))
                    
                    rows = cursor.fetchall()
                    for row in rows:
                        city_data = list(row[:-1])
                        relevance = row[-1]
                        results.append((City(*city_data), float(relevance)))
            
            logger.info(f"Found {len(results)} locations")
            return results
            
        except Exception as e:
            logger.error(f"Error in search_locations: {str(e)}")
            return []

    def get_relevant_tours(self, preferences: Dict[str, float], locations: Set[str]) -> List[Tuple[Tour, float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –ª–æ–∫–∞—Ü–∏–π"""
        logger.info(f"üîé –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏: {preferences}")
        logger.info(f"üìç –õ–æ–∫–∞—Ü–∏–∏: {locations}")

        results = []
        try:
            with self.db._get_cursor() as cursor:
                conditions = []
                params = []
                
                if locations:
                    location_conditions = []
                    for location in locations:
                        location_conditions.extend([
                            "cities LIKE ?",
                            "info LIKE ?"
                        ])
                        params.extend([f'%{location}%', f'%{location}%'])
                    if location_conditions:
                        conditions.append(f"({' OR '.join(location_conditions)})")
                
                category_conditions = []
                for category, score in preferences.items():
                    if category in self.categories:
                        for keyword in self.categories[category]['keywords']:
                            category_conditions.extend([
                                "name LIKE ?",
                                "info LIKE ?"
                            ])
                            params.extend([f'%{keyword}%', f'%{keyword}%'])
                
                if category_conditions:
                    conditions.append(f"({' OR '.join(category_conditions)})")
                
                query = '''
                    SELECT *, 
                        (CASE 
                            WHEN stars IS NOT NULL THEN stars * 0.3
                            ELSE 0 
                        END +
                        CASE 
                            WHEN reviews IS NOT NULL THEN 0.2
                            ELSE 0
                        END) as relevance
                    FROM tours
                '''
                
                if conditions:
                    query += f" WHERE {' AND '.join(conditions)}"
                
                query += " ORDER BY relevance DESC LIMIT 2"
                
                logger.info(f"üìù SQL-–∑–∞–ø—Ä–æ—Å:\n{query}")
                logger.info(f"üìå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
                
                cursor.execute(query, params)
                rows = cursor.fetchall()
                
                for row in rows:
                    tour_data = list(row[:-1])
                    relevance = row[-1]
                    results.append((Tour(*tour_data), float(relevance)))

                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤: {len(results)}")
                return results
                
        except Exception as e:
            logger.error(f"‚ö† –û—à–∏–±–∫–∞ –≤ get_relevant_tours: {str(e)}")
            return []


    def format_location_info(self, city: City, relevance: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏ –≤ Markdown"""
        try:
            info = f"## üèõ {city.name}\n"
            if relevance > 1.5:
                info += "_(–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç!)_\n\n"
            
            if city.info:
                info += f"**–û–ø–∏—Å–∞–Ω–∏–µ**: {city.info}\n\n"
            
            if city.places_to_visit:
                places = city.places_to_visit.split(",")
                info += f"üìç **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞:**\n- " + "\n- ".join(places) + "\n\n"
            
            if city.hotels:
                hotels = city.hotels.split(",")
                info += f"üè® **–ì–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è:**\n- " + "\n- ".join(hotels) + "\n\n"
            
            return info
        except Exception as e:
            logger.error(f"Error formatting location info: {str(e)}")
            return ""

    def format_tour_suggestion(self, tour: Tour) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—É—Ä–∞ –≤ Markdown"""
        try:
            tour_link = f"/tour/{tour.tour_id}"
            
            suggestion = f"### üéØ [{tour.name}]({tour_link})\n"

            if tour.photos:
                suggestion += f'\n<img src="{tour.photos}" width="300" height="200" style="object-fit: cover;">\n'
            
            suggestion += f"\nüí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å**: {tour.price:,.0f} —Ç–µ–Ω–≥–µ\n"

            if tour.stars:
                stars = "‚≠ê" * int(tour.stars)
                suggestion += f"**–†–µ–π—Ç–∏–Ω–≥**: {stars} ({tour.stars:.1f})\n"
            
            if tour.cities:
                suggestion += f"\nüèõ **–ì–æ—Ä–æ–¥–∞**: {tour.cities}\n"
            
            if tour.info:
                suggestion += f"\n‚ÑπÔ∏è **–û–ø–∏—Å–∞–Ω–∏–µ**: {tour.info}\n"
            
            if tour.reviews:
                suggestion += f"\nüë• **–û—Ç–∑—ã–≤—ã**: {tour.reviews}\n"
            
            suggestion += f"\nüîó **[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä—É]({tour_link})**\n"
            
            return suggestion
        except Exception as e:
            logger.error(f"Error formatting tour suggestion: {str(e)}")
            return ""

    def chat_with_context(self, user_id: int, message: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GigaChat —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message}")

            history = [{"role": "system", "content": self.system_prompt}]
            chat_history = self.db.load_chat_history(user_id)

            if chat_history:
                logger.info(f"üìú –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ ({len(chat_history)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
                for msg in chat_history[-5:]:
                    logger.info(f"{msg['role']}: {msg['content']}")

                history.extend(chat_history[-5:])

            history.append({"role": "user", "content": message})

            combined_message = "\n".join([
                f"{msg['role']}: {msg['content']}" for msg in history
            ])

            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ GigaChat:\n{combined_message}")

            with GigaChat(credentials=self.auth_key, 
                        model="GigaChat-Pro", 
                        verify_ssl_certs=self.verify_ssl) as giga:
                response = giga.chat(combined_message)

                if not response or not response.choices:
                    logger.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

                response_text = response.choices[0].message.content
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GigaChat:\n{response_text}")

                return response_text

        except Exception as e:
            logger.error(f"‚ö† –û—à–∏–±–∫–∞ –≤ chat_with_context: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º."


    def process_message(self, user_id: int, message: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ Markdown"""
        preferences = self.analyze_preferences(message)
        locations = self.get_relevant_locations(preferences)
        activities = self.get_relevant_activities(preferences)
        
        base_response = self.chat_with_context(user_id, message)
        
        response_parts = [f"## ü§ñ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç\n\n{base_response}\n"]
        
        if locations:
            location_info = self.search_locations(locations)
            if location_info:
                response_parts.append("## üìç –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:\n")
                for city, relevance in sorted(location_info, key=lambda x: x[1], reverse=True)[:3]:
                    response_parts.append(self.format_location_info(city, relevance))
        
        if "—Ç—É—Ä" in message.lower() or "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ" in message.lower():
            relevant_tours = self.get_relevant_tours(preferences, locations)
            if relevant_tours:
                response_parts.append("## üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã:\n")
                for tour, relevance in sorted(relevant_tours, key=lambda x: x[1], reverse=True):
                    response_parts.append(self.format_tour_suggestion(tour))

        
        if activities:
            response_parts.append("## üé° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n")
            response_parts.append("- " + "\n- ".join(activities))
        
        final_response = "\n".join(response_parts)
        
        self.db.save_chat_message(user_id, "user", message)
        self.db.save_chat_message(user_id, "assistant", final_response)
        
        return final_response


    def format_tour_suggestion(self, tour: Tour) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—É—Ä–∞ –≤ Markdown —Å —Ñ–æ—Ç–æ –∏ —Å—Å—ã–ª–∫–æ–π"""
        tour_link = f"/tour/{tour.tour_id}"
        
        suggestion = f"### üéØ [{tour.name}]({tour_link})\n"

        if tour.photos:
            suggestion += f'\n<img src="{tour.photos}" width="300" height="200" style="object-fit: cover;">\n'
        
        suggestion += f"\nüí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å**: {tour.price:,.0f} —Ç–µ–Ω–≥–µ\n"

        if tour.stars:
            stars = "\n‚≠ê" * int(tour.stars)
            suggestion += f"**–†–µ–π—Ç–∏–Ω–≥**: {stars} ({tour.stars:.1f})\n"
        
        if tour.cities:
            suggestion += f"\nüèõ **–ì–æ—Ä–æ–¥–∞**: {tour.cities}\n"
        
        if tour.info:
            suggestion += f"\n‚ÑπÔ∏è **–û–ø–∏—Å–∞–Ω–∏–µ**: {tour.info}\n"
        
        if tour.reviews:
            suggestion += f"\nüë• **–û—Ç–∑—ã–≤—ã**: {tour.reviews}\n"
        

        
        suggestion += f"\nüîó **[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä—É]({tour_link})**\n"
        
        return suggestion


    def chat_with_context(self, user_id: int, message: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GigaChat —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            history = [{"role": "system", "content": self.system_prompt}]
            chat_history = self.db.load_chat_history(user_id)
            
            if chat_history:
                history.extend(chat_history[-5:])
            
            history.append({"role": "user", "content": message})
            
            combined_message = "\n".join([
                f"{msg['role']}: {msg['content']}" for msg in history
            ])

            with GigaChat(credentials=self.auth_key, 
                         model="GigaChat", 
                         verify_ssl_certs=self.verify_ssl) as giga:
                response = giga.chat(combined_message)
                return response.choices[0].message.content if response.choices else \
                       "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GigaChat: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –∏—Å–ø—ã—Ç—ã–≤–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."